# This is a sample build configuration for Docker.
# Check our guides at https://confluence.atlassian.com/x/O1toN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: atlassian/default-image:2

definitions:
  services:
    docker:
      memory: 3072

  steps:
    - step: &build
        name: Docker image build
        size: 2x
        services:
          - docker
        script:
          # Set $DOCKER_HUB_USERNAME and $DOCKER_HUB_PASSWORD as environment variables in repository settings.
          - export IMAGE_NAME="${GCR_IMAGE_PREFIX}/${BITBUCKET_REPO_SLUG}"

          # Build the Docker `admin` image.
          # WARNING: we are using remote.Dockerfile which will be used for both staging and production.
          - docker image build
            --tag "${IMAGE_NAME}_web:${BITBUCKET_BRANCH}-${BITBUCKET_COMMIT}"
            --build-arg POSTGRES_PASSWORD_ARG
            --build-arg RAILS_MASTER_KEY_ARG
            --file ./admin/remote.Dockerfile
            ./admin

          # Tag the image as latest (currently the only way to target the image from the remote server automatically).
          - docker image tag "${IMAGE_NAME}_web:${BITBUCKET_BRANCH}-${BITBUCKET_COMMIT}" "${IMAGE_NAME}_web:${BITBUCKET_BRANCH}"

          # Authenticate with the Docker Hub registry.
          - echo $GCR_JSON_KEY | docker login --username _json_key --password-stdin $GCR_HOST
          # Push the new Docker image to the Docker registry.
          - docker push "${IMAGE_NAME}_web:${BITBUCKET_BRANCH}-${BITBUCKET_COMMIT}"
          - docker push "${IMAGE_NAME}_web:${BITBUCKET_BRANCH}"

    - step: &deploy
        name: Deploy to remote server
        script:
          # Create the directory on the remote server.
          - echo "mkdir -p ${DEPLOY_DIRECTORY}" | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
          # Copy the docker-compose files to the deploy directory.
          - scp ./docker-compose.* $REMOTE_SERVER_USER@$REMOTE_SERVER_IP:$DEPLOY_DIRECTORY
          # Generate a file where to build deployment scripts
          - cat pipeline/deploy_scripts.sh >> deploy_pipeline.sh
          # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
          - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" deploy_pipeline.sh
          # Replace DEPLOY_DIRECTORY placeholder with the actual value
          - sed -i "s|%%DEPLOY_DIRECTORY%%|${DEPLOY_DIRECTORY}|g" deploy_pipeline.sh
          # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
          - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" deploy_pipeline.sh
          # Execute commands to update the remote application.
          - cat deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP
          # Generate a file where to build deployment scripts
          - cat pipeline/post_deploy_scripts.sh >> post_deploy_pipeline.sh
          # Replace DEPLOY_DIRECTORY placeholder with the actual value
          - sed -i "s|%%DEPLOY_DIRECTORY%%|${DEPLOY_DIRECTORY}|g" post_deploy_pipeline.sh
          # Replace BITBUCKET_REPO_SLUG placeholder with the actual value
          - sed --in-place "s/%%BITBUCKET_REPO_SLUG%%/${BITBUCKET_REPO_SLUG}/" post_deploy_pipeline.sh
          # Replace BITBUCKET_DEPLOYMENT_ENVIRONMENT placeholder with the actual value
          - sed --in-place "s/%%BITBUCKET_DEPLOYMENT_ENVIRONMENT%%/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}/" post_deploy_pipeline.sh
          # Execute deployment scripts to update the remote application.
          - cat post_deploy_pipeline.sh | ssh $REMOTE_SERVER_USER@$REMOTE_SERVER_IP

pipelines:
  branches:
    # staging:
    #   - step:
    #       <<: *build
    #       deployment: staging-build
    #   - step:
    #       <<: *deploy
    #       deployment: staging
    production:
      - step:
          <<: *build
          deployment: production-build
      - step:
          <<: *deploy
          deployment: production
